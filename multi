#! /usr/bin/env python

import sys

from lexer  import *
from parser import *
from engine import *

argc = len(sys.argv) - 1

if argc > 1:
    print('usage: multi [<file>]')
    sys.exit(0)

statements = []

if argc == 1:
    with open(sys.argv[1]) as fh:
        stream = TokenStream(fh.read())

    while True:
        result = parse_statement(stream)
        if result is None:
            break
        if isinstance(result, ParseFailure):
            result.show(stream.log())
            sys.exit(1)
        reified = reify(result)
        if isinstance(reified, ParseFailure):
            reified.show(stream.log())
            sys.exit(1)
        statements.append(reified)

    count = reindex(statements)
    run(statements, Environment(count))
    sys.exit(0)

def prompt():
    while True:
        print("\x1B[2m>\x1B[22m", end=' ')
        line = input()
        stripped = line.strip()
        if stripped in ('exit', 'quit'):
            exit()
        if stripped == 'clear':
            statements.clear()
        if stripped == 'show':
            count = reindex(statements)
            for s in statements:
                print(s)
            continue
        if stripped == 'run':
            count = reindex(statements)
            run(statements, Environment(count))
            continue
        return line + "\n"

stream = TokenStream("", prompt)

while True:
    result = parse_statement(stream)
    if result is None:
        pass
    elif isinstance(result, ParseFailure):
        result.show(stream.log())
        stream.clear_line()
    else:
        reified = reify(result)
        if isinstance(reified, ParseFailure):
            reified.show(stream.log())
        else:
            statements.append(reified)
